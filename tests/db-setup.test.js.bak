/**
 * Database Setup Tests
 * Tests for database setup and migration functions
 */

const db = require('../db/index');
const { initDatabase } = require('../db/setup');

// Mock modules
jest.mock('../db/index', () => ({
  schema: {
    hasTable: jest.fn()
  },
  migrate: {
    latest: jest.fn(),
    currentVersion: jest.fn()
  },
  raw: jest.fn()
}));

describe('Database Setup', () => {
  // Reset mocks between tests
  beforeEach(() => {
    jest.resetAllMocks();
    // Store original environment
    this.originalEnv = process.env.NODE_ENV;
  });

  // Restore environment after tests
  afterAll(() => {
    process.env.NODE_ENV = this.originalEnv;
  });

  test('initDatabase runs migrations successfully', async () => {
    // Mock successful database operations
    db.schema.hasTable.mockResolvedValue(true);
    db.migrate.latest.mockResolvedValue([2, 2]);
    db.migrate.currentVersion.mockResolvedValue('20250522_postgres_optimizations');
    
    const result = await initDatabase();
    
    // Check that migrations were attempted
    expect(db.migrate.latest).toHaveBeenCalled();
    expect(db.migrate.currentVersion).toHaveBeenCalled();
    expect(result).toBe(true);
  });

  test('initDatabase handles first-time setup', async () => {
    // Mock first-time setup (migrations table doesn't exist)
    db.schema.hasTable.mockResolvedValue(false);
    db.migrate.latest.mockResolvedValue([2, 2]);
    db.migrate.currentVersion.mockResolvedValue('20250522_postgres_optimizations');
    
    const result = await initDatabase();
    
    // Check that migrations were attempted
    expect(db.schema.hasTable).toHaveBeenCalledWith('knex_migrations');
    expect(db.migrate.latest).toHaveBeenCalled();
    expect(result).toBe(true);
  });

  test('initDatabase handles migration errors', async () => {
    // Mock migration failure
    db.schema.hasTable.mockResolvedValue(true);
    db.migrate.latest.mockRejectedValue(new Error('Migration failed'));
    
    // Verify error is caught
    await expect(initDatabase()).resolves.not.toThrow();
  });

  test('waitForDatabase in production environment', async () => {
    // Set environment to production
    process.env.NODE_ENV = 'production';
    
    // Mock database connection attempts
    db.raw.mockResolvedValueOnce('connected');
    
    // Re-import with new environment
    jest.resetModules();
    const { initDatabase } = require('../db/setup');
    
    const result = await initDatabase();
    
    // Check that raw query was attempted for connection check
    expect(db.raw).toHaveBeenCalledWith('SELECT 1');
    expect(db.migrate.latest).toHaveBeenCalled();
  });

  test('waitForDatabase handles connection failures', async () => {
    // Set environment to production
    process.env.NODE_ENV = 'production';
    
    // Mock database connection failures then success
    db.raw.mockRejectedValueOnce(new Error('Connection failed'))
      .mockRejectedValueOnce(new Error('Connection failed'))
      .mockResolvedValueOnce('connected');
    
    // Mock timer to avoid actual waiting
    jest.spyOn(global, 'setTimeout').mockImplementation((cb) => cb());
    
    // Re-import with new environment
    jest.resetModules();
    const { initDatabase } = require('../db/setup');
    
    const result = await initDatabase();
    
    // Check that we tried 3 times to connect
    expect(db.raw).toHaveBeenCalledTimes(3);
    expect(db.migrate.latest).toHaveBeenCalled();
  });
});
